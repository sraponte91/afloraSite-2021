{"remainingRequest":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/samaponte/Documents/afloraVue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/samaponte/Documents/afloraVue/src/views/index-one/Screenshots.vue?vue&type=template&id=588ab45f&","dependencies":[{"path":"/Users/samaponte/Documents/afloraVue/src/views/index-one/Screenshots.vue","mtime":1618347380320},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgInNlY3Rpb24iLAogICAgewogICAgICBzdGF0aWNDbGFzczogInNjcmVlbnNob3RzLXNlY3Rpb24iLAogICAgICBjbGFzczogewogICAgICAgICJncmF5LWxpZ2h0LWJnIjogX3ZtLmlzR3JheSwKICAgICAgICAicGItMTAwIjogX3ZtLnBhZGRpbmdCb3R0b20sCiAgICAgICAgInB0LTEwMCI6IF92bS5wYWRkaW5nVG9wCiAgICAgIH0sCiAgICAgIGF0dHJzOiB7IGlkOiAicnV0YS1mb3JtYXRpdmEiIH0KICAgIH0sCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgX3ZtLl9tKDApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAic2NyZWVuc2hvdC13cmFwIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiY2Fyb3VzZWwiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2NyZWVuLWNhcm91c2VsIG93bC10aGVtZSBkb3QtaW5kaWNhdG9yIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLAogICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlLAogICAgICAgICAgICAgICAgICBsb29wOiB0cnVlLAogICAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB7CiAgICAgICAgICAgICAgICAgICAgMDogeyBpdGVtczogMSB9LAogICAgICAgICAgICAgICAgICAgIDc2ODogeyBpdGVtczogMyB9LAogICAgICAgICAgICAgICAgICAgIDk5MTogeyBpdGVtczogNCB9LAogICAgICAgICAgICAgICAgICAgIDEyMDA6IHsgaXRlbXM6IDQgfSwKICAgICAgICAgICAgICAgICAgICAxOTIwOiB7IGl0ZW1zOiA0IH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLAogICAgICAgICAgICAgICAgICBjZW50ZXI6IHRydWUsCiAgICAgICAgICAgICAgICAgIG5hdjogZmFsc2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvMDEuanBnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAic2NyZWVuc2hvdHMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy8wMi5qcGciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJzY3JlZW5zaG90cyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nLzAzLmpwZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogInNjcmVlbnNob3RzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvMDQuanBnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAic2NyZWVuc2hvdHMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy8wNS5qcGciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJzY3JlZW5zaG90cyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nLzA2LmpwZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogInNjcmVlbnNob3RzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvMDcuanBnIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAic2NyZWVuc2hvdHMiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy8wOC5qcGciKSwKICAgICAgICAgICAgICAgICAgICBhbHQ6ICJzY3JlZW5zaG90cyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nLzA5LmpwZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogInNjcmVlbnNob3RzIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJyb3cgYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuIHRleHQtY2VudGVyIHRleHQtbGctbGVmdCBwdC00MCIKICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy02IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZlYXR1cmUtY29udGVudHMgc2VjdGlvbi1oZWFkaW5nIiB9LCBbCiAgICAgICAgICAgIF9jKCJoMiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIkNvbiBsb3MgcmVzdWx0YWRvcyBkZWwgYXV0b2RpYWduw7NzdGljbywgcHVlZGUgZW1wcmVuZGVyIGxhIFJ1dGEgZGUgRm9ybWFjacOzbiB2aXJ0dWFsLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIEVsIHByb2Nlc28gZGUgZm9ybWFjacOzbiBmdWUgZGlzZcOxYWRvIHBvciBBZmxvcmEgcGFyYSBxdWUgdGFudG8gZWwgbMOtZGVyIGNvbW8gZWwgZXF1aXBvIGRlIHN1IG9yZ2FuaXphY2nDs24gbWVqb3JlbiBlbiBsYXMgw6FyZWFzIGV2YWx1YWRhcyB5IGFzw60gdHJhY2VuIG1ldGFzIGRlZmluaWRhcywgb3JpZW50YWRhcyBhIGN1bXBsaXIgb2JqZXRpdm9zIGRlIGNvcnRvLCBtZWRpYW5vIHkgbGFyZ28gcGxhem8uICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFjdGlvbi1idG5zIG10LTQiIH0sIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWJyYW5kLTAyIG1yLTMgZm9ybS1idG4iLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIkluaWNpZSBsYSBydXRhIGRlIGZvcm1hY2nDs24iKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYgY29sLWxnLTYiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvYmFubmVyLTMuc3ZnIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJhYm91dCIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}