{"remainingRequest":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/samaponte/Documents/afloraVue/src/pages/blogs/BlogLeftSideBarPage.vue?vue&type=template&id=072f9920&","dependencies":[{"path":"/Users/samaponte/Documents/afloraVue/src/pages/blogs/BlogLeftSideBarPage.vue","mtime":1601658651000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/samaponte/Documents/afloraVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgICA8bmF2LWJhciAvPgoKICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgIDxwYWdlLWhlYWRlcgogICAgICAgICAgICAgICAgdGl0bGU9IkJsb2cgTGVmdCBTaWRlYmFyIgogICAgICAgICAgICAgICAgc3VidGl0bGU9IlJhcGlkaW91c2x5IGRlcGxveSB3b3JsZC1jbGFzcyBwbGF0Zm9ybXMgd2hlcmVhcyBjb2xsYWJvcmF0aXZlIGludGVyZmFjZXMuIFBob3NmbHVvcmVzY2VudGx5IGZhY2lsaXRhdGUgY29ycG9yYXRlIGlubm92YXRpb24gdmlhIGV4Y2VsbGVudCB3ZWIgdGVjaG5pY2FsbHkgc291bmQuICIKICAgICAgICAvPgogICAgICAgIDxicmVhZGNydW1iIDpjcnVtYnM9ImNydW1icyIgLz4KCiAgICAgICAgPGRpdiBjbGFzcz0ibW9kdWxlIHB0Yi0xMDAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNCBjb2wtbWQtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNpZGViYXItbGVmdCBwci00Ij4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFNlYXJjaCB3aWRnZXQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhc2lkZSBjbGFzcz0id2lkZ2V0IHdpZGdldC1zZWFyY2giPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0ic2VhcmNoIiBwbGFjZWhvbGRlcj0iVHlwZSBTZWFyY2ggV29yZHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJzZWFyY2gtYnV0dG9uIiB0eXBlPSJzdWJtaXQiPjxzcGFuIGNsYXNzPSJ0aS1zZWFyY2giPjwvc3Bhbj48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FzaWRlPgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIENhdGVnb3JpZXMgd2lkZ2V0LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YXNpZGUgY2xhc3M9IndpZGdldCB3aWRnZXQtY2F0ZWdvcmllcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PkNhdGVnb3JpZXM8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMiPkpvdXJuZXkgPHNwYW4gY2xhc3M9ImZsb2F0LXJpZ2h0Ij4xMTI8L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjIj5EZXZlbG9wbWVudCA8c3BhbiBjbGFzcz0iZmxvYXQtcmlnaHQiPjg2PC9zcGFuPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+U3BvcnQgPHNwYW4gY2xhc3M9ImZsb2F0LXJpZ2h0Ij4xMDwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMiPlBob3RvZ3JhcGh5IDxzcGFuIGNsYXNzPSJmbG9hdC1yaWdodCI+MTQ0PC9zcGFuPjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+U3ltcGhvbnkgPHNwYW4gY2xhc3M9ImZsb2F0LXJpZ2h0Ij4xODwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc2lkZT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFJlY2VudCBlbnRyaWVzIHdpZGdldC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzaWRlIGNsYXNzPSJ3aWRnZXQgd2lkZ2V0LXJlY2VudC1lbnRyaWVzLWN1c3RvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PlJlY2VudCBQb3N0czwvaDY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndpIj48YSBocmVmPSIjIj48aW1nIHNyYz0iLi4vLi4vYXNzZXRzL2ltZy9ibG9nLzEuanBnIiBhbHQ9InJlY2VudCBwb3N0IiBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQiIC8+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2IiPjxhIGhyZWY9IiMiPk1hcCB3aGVyZSB5b3VyIHBob3RvcyB3ZXJlIHRha2VuIGFuZCBkaXNjb3ZlciBsb2NhbCBwb2ludHMuPC9hPjxzcGFuIGNsYXNzPSJwb3N0LWRhdGUiPk1heSA4LCAyMDE2PC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndpIj48YSBocmVmPSIjIj48aW1nIHNyYz0iLi4vLi4vYXNzZXRzL2ltZy9ibG9nLzIuanBnIiBhbHQ9InJlY2VudCBwb3N0IiBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQiIC8+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2IiPjxhIGhyZWY9IiMiPk1hcCB3aGVyZSB5b3VyIHBob3RvcyB3ZXJlIHRha2VuIGFuZCBkaXNjb3ZlciBsb2NhbCBwb2ludHMuPC9hPjxzcGFuIGNsYXNzPSJwb3N0LWRhdGUiPk1heSA4LCAyMDE2PC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImNsZWFyZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndpIj48YSBocmVmPSIjIj48aW1nIHNyYz0iLi4vLi4vYXNzZXRzL2ltZy9ibG9nLzMuanBnIiBhbHQ9InJlY2VudCBwb3N0IiBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQiIC8+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2IiPjxhIGhyZWY9IiMiPk1hcCB3aGVyZSB5b3VyIHBob3RvcyB3ZXJlIHRha2VuIGFuZCBkaXNjb3ZlciBsb2NhbCBwb2ludHMuPC9hPjxzcGFuIGNsYXNzPSJwb3N0LWRhdGUiPk1heSA4LCAyMDE2PC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FzaWRlPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gU3Vic2NyaWJlIHdpZGdldC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzaWRlIGNsYXNzPSJ3aWRnZXQgd2lkZ2V0LWNhdGVnb3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndpZGdldC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNj5OZXdzbGV0dGVyPC9oNj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5FbnRlciB5b3VyIGVtYWlsIGFkZHJlc3MgYmVsb3cgdG8gc3Vic2NyaWJlIHRvIG15IG5ld3NsZXR0ZXI8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIjIiBtZXRob2Q9InBvc3QiIGNsYXNzPSJkLW5vbmUgZC1tZC1ibG9jayBkLWxnLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgaW5wdXQiIGlkPSJlbWFpbC1mb290ZXIiIG5hbWU9ImVtYWlsIiBwbGFjZWhvbGRlcj0iaW5mb0B5b3VyZG9tYWluLmNvbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBjbGFzcz0iYnRuIGJ0bi1icmFuZC0wMiBidG4tYmxvY2sgYnRuLW5vdC1yb3VuZGVkIG10LTMiPlN1YnNjcmliZTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYXNpZGU+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBUYWdzIHdpZGdldC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFzaWRlIGNsYXNzPSJ3aWRnZXQgd2lkZ2V0LXRhZy1jbG91ZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0id2lkZ2V0LXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2PlRhZ3M8L2g2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhZy1jbG91ZCI+PGEgaHJlZj0iIyI+ZS1jb21tZXJjZTwvYT48YSBocmVmPSIjIj5wb3J0Zm9saW88L2E+PGEgaHJlZj0iIyI+cmVzcG9uc2l2ZTwvYT48YSBocmVmPSIjIj5ib290c3RyYXA8L2E+PGEgaHJlZj0iIyI+YnVzaW5lc3M8L2E+PGEgaHJlZj0iIyI+Y29ycG9yYXRlPC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hc2lkZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTggY29sLW1kLTgiPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3N0LS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPSJwb3N0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtcHJldmlldyI+PGEgaHJlZj0iIyI+PGltZyBzcmM9Ii4uLy4uL2Fzc2V0cy9pbWcvYmxvZy8yLXcuanBnIiBhbHQ9ImJsb2ciIC8+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LWhlYWRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0icG9zdC10aXRsZSI+PGEgaHJlZj0iIyI+T2JqZWN0aXZlbHkgY29tbXVuaWNhdGUgYnVzaW5lc3MgY29yZSBjb21wZXRlbmNpZXMgPC9hPjwvaDI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0icG9zdC1tZXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5Ob3ZlbWJlciAxOCwgMjAxNjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+QnJhbmRpbmc8L2E+LCA8YSBocmVmPSIjIj5EZXNpZ248L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjIj4zIENvbW1lbnRzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+SnVzdCB0aGVuIGhlciBoZWFkIHN0cnVjayBhZ2FpbnN0IHRoZSByb29mIG9mIHRoZSBoYWxsIGluIGZhY3Qgc2hlIHdhcyBub3cgbW9yZSB0aGFuIG5pbmUgZmVldCBoaWdoIGFuZCBzaGUgYXQgb25jZSB0b29rIHVwIHRoZSBsaXR0bGUgZ29sZGVuIGtleSBhbmQgaHVycmllZCBvZmYgdG8gdGhlIGdhcmRlbiBkb29yLiBUaGUgZmlyc3QgcXVlc3Rpb24gb2YgY291cnNlIHdhcywgaG93IHRvIGdldCBkcnkgYWdhaW46IHRoZXkgaGFkIGEgY29uc3VsdGF0aW9uIGFib3V0IHRoaXMsIGFuZCBhZnRlciBhIGZldyBtaW51dGVzIGl0IHNlZW1lZCBxdWl0ZSBuYXR1cmFsIHRvIEFsaWNlIHRvIGZpbmQgaGVyc2VsZiB0YWxraW5nIGZhbWlsaWFybHkgd2l0aCB0aGVtLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LW1vcmUgcHQtNCBhbGlnbi1pdGVtcy1jZW50ZXIgZC1mbGV4Ij48YSBocmVmPSIjIiBjbGFzcz0iYnRuIGJ0bi1icmFuZC0wMiI+UmVhZCBtb3JlIDxzcGFuIGNsYXNzPSJ0aS1hcnJvdy1yaWdodCI+PC9zcGFuPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2FydGljbGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9zdCBlbmQtLT4KCiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gUG9zdC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz0icG9zdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LXByZXZpZXciPjxhIGhyZWY9IiMiPjxpbWcgc3JjPSIuLi8uLi9hc3NldHMvaW1nL2Jsb2cvMy13LmpwZyIgYWx0PSJibG9nIiAvPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3Qtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9InBvc3QtdGl0bGUiPjxhIGhyZWY9IiMiPk9iamVjdGl2ZWx5IGNvbW11bmljYXRlIGJ1c2luZXNzIGNvcmUgY29tcGV0ZW5jaWVzIDwvYT48L2gyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InBvc3QtbWV0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+Tm92ZW1iZXIgMTgsIDIwMTY8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMiPkJyYW5kaW5nPC9hPiwgPGEgaHJlZj0iIyI+RGVzaWduPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyI+MyBDb21tZW50czwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPkp1c3QgdGhlbiBoZXIgaGVhZCBzdHJ1Y2sgYWdhaW5zdCB0aGUgcm9vZiBvZiB0aGUgaGFsbCBpbiBmYWN0IHNoZSB3YXMgbm93IG1vcmUgdGhhbiBuaW5lIGZlZXQgaGlnaCBhbmQgc2hlIGF0IG9uY2UgdG9vayB1cCB0aGUgbGl0dGxlIGdvbGRlbiBrZXkgYW5kIGh1cnJpZWQgb2ZmIHRvIHRoZSBnYXJkZW4gZG9vci4gVGhlIGZpcnN0IHF1ZXN0aW9uIG9mIGNvdXJzZSB3YXMsIGhvdyB0byBnZXQgZHJ5IGFnYWluOiB0aGV5IGhhZCBhIGNvbnN1bHRhdGlvbiBhYm91dCB0aGlzLCBhbmQgYWZ0ZXIgYSBmZXcgbWludXRlcyBpdCBzZWVtZWQgcXVpdGUgbmF0dXJhbCB0byBBbGljZSB0byBmaW5kIGhlcnNlbGYgdGFsa2luZyBmYW1pbGlhcmx5IHdpdGggdGhlbS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1tb3JlIHB0LTQgYWxpZ24taXRlbXMtY2VudGVyIGQtZmxleCI+PGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tYnJhbmQtMDIiPlJlYWQgbW9yZSA8c3BhbiBjbGFzcz0idGktYXJyb3ctcmlnaHQiPjwvc3Bhbj48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hcnRpY2xlPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvc3QgZW5kLS0+CgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIFBvc3QtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGFydGljbGUgY2xhc3M9InBvc3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zdC1wcmV2aWV3Ij48YSBocmVmPSIjIj48aW1nIHNyYz0iLi4vLi4vYXNzZXRzL2ltZy9ibG9nLzQtdy5qcGciIGFsdD0iYmxvZyIgLz48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LXdyYXBwZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtaGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPSJwb3N0LXRpdGxlIj48YSBocmVmPSIjIj5PYmplY3RpdmVseSBjb21tdW5pY2F0ZSBidXNpbmVzcyBjb3JlIGNvbXBldGVuY2llcyA8L2E+PC9oMj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJwb3N0LW1ldGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPk5vdmVtYmVyIDE4LCAyMDE2PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjIj5CcmFuZGluZzwvYT4sIDxhIGhyZWY9IiMiPkRlc2lnbjwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9IiMiPjMgQ29tbWVudHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3N0LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5KdXN0IHRoZW4gaGVyIGhlYWQgc3RydWNrIGFnYWluc3QgdGhlIHJvb2Ygb2YgdGhlIGhhbGwgaW4gZmFjdCBzaGUgd2FzIG5vdyBtb3JlIHRoYW4gbmluZSBmZWV0IGhpZ2ggYW5kIHNoZSBhdCBvbmNlIHRvb2sgdXAgdGhlIGxpdHRsZSBnb2xkZW4ga2V5IGFuZCBodXJyaWVkIG9mZiB0byB0aGUgZ2FyZGVuIGRvb3IuIFRoZSBmaXJzdCBxdWVzdGlvbiBvZiBjb3Vyc2Ugd2FzLCBob3cgdG8gZ2V0IGRyeSBhZ2FpbjogdGhleSBoYWQgYSBjb25zdWx0YXRpb24gYWJvdXQgdGhpcywgYW5kIGFmdGVyIGEgZmV3IG1pbnV0ZXMgaXQgc2VlbWVkIHF1aXRlIG5hdHVyYWwgdG8gQWxpY2UgdG8gZmluZCBoZXJzZWxmIHRhbGtpbmcgZmFtaWxpYXJseSB3aXRoIHRoZW0uPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvc3QtbW9yZSBwdC00IGFsaWduLWl0ZW1zLWNlbnRlciBkLWZsZXgiPjxhIGhyZWY9IiMiIGNsYXNzPSJidG4gYnRuLWJyYW5kLTAyIj5SZWFkIG1vcmUgPHNwYW4gY2xhc3M9InRpLWFycm93LXJpZ2h0Ij48L3NwYW4+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYXJ0aWNsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQb3N0IGVuZC0tPgoKICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBQYWdlIE5hdmlnYXRpb24tLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hdiBjbGFzcz0iY3VzdG9tLXBhZ2luYXRpb24tbmF2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJwYWdpbmF0aW9uIGp1c3RpZnktY29udGVudC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPjxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9IiMiPjxzcGFuIGNsYXNzPSJ0aS1hbmdsZS1sZWZ0Ij48L3NwYW4+PC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSBhY3RpdmUiPjxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9IiMiPjE8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj48YSBjbGFzcz0icGFnZS1saW5rIiBocmVmPSIjIj4yPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InBhZ2UtaXRlbSI+PGEgY2xhc3M9InBhZ2UtbGluayIgaHJlZj0iIyI+MzwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJwYWdlLWl0ZW0iPjxhIGNsYXNzPSJwYWdlLWxpbmsiIGhyZWY9IiMiPjQ8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0icGFnZS1pdGVtIj48YSBjbGFzcz0icGFnZS1saW5rIiBocmVmPSIjIj48c3BhbiBjbGFzcz0idGktYW5nbGUtcmlnaHQiPjwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25hdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNpdGUtZm9vdGVyIC8+CiAgICA8Y29weXJpZ2h0IC8+CjwvZGl2Pgo="},null]}