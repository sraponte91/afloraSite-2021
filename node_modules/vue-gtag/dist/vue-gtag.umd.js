(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.VueGtag = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var noop = function noop() {};
  function loadScript(url) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return new Promise(function (resolve, reject) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      script.async = true;
      script.src = url;
      script.charset = "utf-8";
      script.defer = options.defer;

      if (options.preconnectOrigin) {
        var link = document.createElement("link");
        link.href = options.preconnectOrigin;
        link.rel = "preconnect";
        head.appendChild(link);
      }

      head.appendChild(script);
      script.onload = resolve;
      script.onerror = reject;
    });
  }
  function warn(msg) {
    console.warn("[vue-gtag] " + msg);
  }
  function isFn(item) {
    return typeof item === "function";
  }
  function isObject(item) {
    return item && _typeof(item) === "object" && !Array.isArray(item);
  }
  function mergeDeep(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }

    if (!sources.length) {
      return target;
    }

    var source = sources.shift();

    if (!isObject(target) || !isObject(source)) {
      return;
    }

    for (var key in source) {
      if (isObject(source[key])) {
        if (!target[key]) {
          Object.assign(target, _defineProperty({}, key, {}));
        }

        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, _defineProperty({}, key, source[key]));
      }
    }

    return mergeDeep.apply(void 0, [target].concat(sources));
  }

  function query () {
    var _window;

    var _getOptions = getOptions(),
        globalObjectName = _getOptions.globalObjectName;

    if (typeof document === "undefined" || typeof window === "undefined") {
      return;
    }

    (_window = window)[globalObjectName].apply(_window, arguments);
  }

  var config = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _getOptions = getOptions(),
        config = _getOptions.config,
        includes = _getOptions.includes;

    query.apply(void 0, ["config", config.id].concat(args));

    if (Array.isArray(includes)) {
      includes.forEach(function (domain) {
        query.apply(void 0, ["config", domain.id].concat(args));
      });
    }
  });

  var event = (function (name) {
    var _params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _getOptions = getOptions(),
        defaultGroupName = _getOptions.defaultGroupName,
        includes = _getOptions.includes;

    var params = _params;

    if (includes && params.send_to == null) {
      params.send_to = includes.map(function (include) {
        return include.id;
      }).concat(defaultGroupName);
    }

    query("event", name, params);
  });

  var pageview = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var arg = args[0];
    var params = {};

    if (typeof arg === "string") {
      params = {
        page_path: arg,
        page_location: window.location.href
      };
    } else {
      params = arg;
    }

    if (params.send_page_view == null) {
      params.send_page_view = true;
    }

    event("page_view", params);
  });

  var screenview = (function () {
    var _getOptions = getOptions(),
        appName = _getOptions.appName;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var arg = args[0];
    var params = {};

    if (typeof arg === "string") {
      params = {
        screen_name: arg
      };
    } else {
      params = arg;
    }

    if (params.app_name == null) {
      params.app_name = appName;
    }

    if (params.send_page_view == null) {
      params.send_page_view = true;
    }

    event("screen_view", params);
  });

  var customMap = (function (map) {
    config({
      custom_map: map
    });
  });

  var time = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    event.apply(void 0, ["timing_complete"].concat(args));
  });

  var exception = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    event.apply(void 0, ["exception"].concat(args));
  });

  var linker = (function (params) {
    config("linker", params);
  });

  var purchase = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    event.apply(void 0, ["purchase"].concat(args));
  });

  var refund = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    event.apply(void 0, ["refund"].concat(args));
  });

  var set = (function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    query.apply(void 0, ["set"].concat(args));
  });

  var disable = (function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    var _getOptions = getOptions(),
        includes = _getOptions.includes,
        config = _getOptions.config;

    window["ga-disable-".concat(config.id)] = value;

    if (Array.isArray(includes)) {
      includes.forEach(function (domain) {
        window["ga-disable-".concat(domain.id)] = value;
      });
    }
  });

  var optIn = (function () {
    disable(false);
  });

  var optOut = (function () {
    disable(true);
  });

  var api = {
    query: query,
    config: config,
    event: event,
    pageview: pageview,
    screenview: screenview,
    customMap: customMap,
    time: time,
    exception: exception,
    linker: linker,
    purchase: purchase,
    refund: refund,
    set: set,
    optIn: optIn,
    optOut: optOut
  };

  var extend = (function () {
    var Vue = getVue();
    Vue.$gtag = Vue.prototype.$gtag = api;
  });

  var getPageviewTemplate = function getPageviewTemplate() {
    var to = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _getOptions = getOptions(),
        pageTrackerTemplate = _getOptions.pageTrackerTemplate,
        pageTrackerScreenviewEnabled = _getOptions.pageTrackerScreenviewEnabled,
        pageTrackerUseFullPath = _getOptions.pageTrackerUseFullPath,
        appName = _getOptions.appName;

    var template;
    var customTemplate = pageTrackerTemplate(to, from);

    if (customTemplate) {
      template = customTemplate;
    } else if (pageTrackerScreenviewEnabled) {
      template = {
        app_name: appName,
        screen_name: to.name
      };
    } else {
      template = {
        page_title: to.name,
        page_path: pageTrackerUseFullPath ? to.fullPath : to.path,
        page_location: window.location.href
      };
    }

    return template;
  };
  var trackPage = function trackPage() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$to = _ref.to,
        to = _ref$to === void 0 ? {} : _ref$to,
        _ref$from = _ref.from,
        from = _ref$from === void 0 ? {} : _ref$from,
        _ref$params = _ref.params,
        params = _ref$params === void 0 ? {} : _ref$params;

    var _getOptions2 = getOptions(),
        pageTrackerSkipSamePath = _getOptions2.pageTrackerSkipSamePath,
        pageTrackerScreenviewEnabled = _getOptions2.pageTrackerScreenviewEnabled;

    if (pageTrackerSkipSamePath && to.path === from.path) {
      return;
    }

    var newParams = _objectSpread2(_objectSpread2({}, getPageviewTemplate(to, from)), params);

    if (pageTrackerScreenviewEnabled && !newParams.app_name) {
      warn("To use the screenview, add the appName to the plugin options");
      return;
    }

    if (pageTrackerScreenviewEnabled && !newParams.screen_name) {
      warn("To use the screenview, name your routes");
      return;
    }

    if (pageTrackerScreenviewEnabled) {
      screenview(newParams);
      return;
    }

    pageview(newParams);
  };
  var startRouter = function startRouter(Router) {
    var Vue = getVue();

    var _getOptions3 = getOptions(),
        onBeforeTrack = _getOptions3.onBeforeTrack,
        onAfterTrack = _getOptions3.onAfterTrack,
        config = _getOptions3.config;
    /* istanbul ignore next */


    Router.onReady(function () {
      Vue.nextTick().then(function () {
        api.config(config.params);
        trackPage({
          to: Router.currentRoute
        });
      });
      Router.afterEach(function (to, from) {
        Vue.nextTick().then(function () {
          onBeforeTrack(to, from);
          trackPage({
            to: to,
            from: from
          });
          onAfterTrack(to, from);
        });
      });
    });
  };
  var autotrack = function autotrack() {
    var Router = getRouter();

    if (!Router) {
      return;
    }

    startRouter(Router);
  };

  function _bootstrap () {
    if (typeof document === "undefined" || typeof window === "undefined") {
      return;
    }

    var _getOptions = getOptions(),
        customResourceURL = _getOptions.customResourceURL,
        customPreconnectOrigin = _getOptions.customPreconnectOrigin,
        enabled = _getOptions.enabled,
        globalObjectName = _getOptions.globalObjectName,
        globalDataLayerName = _getOptions.globalDataLayerName,
        config = _getOptions.config,
        pageTrackerEnabled = _getOptions.pageTrackerEnabled,
        onReady = _getOptions.onReady,
        onError = _getOptions.onError,
        deferScriptLoad = _getOptions.deferScriptLoad,
        disableScriptLoad = _getOptions.disableScriptLoad;

    var Router = getRouter();
    var isPageTrackerEnabled = Boolean(pageTrackerEnabled && Router);

    if (!enabled) {
      optOut();
    }

    if (window[globalObjectName] == null) {
      window[globalDataLayerName] = window[globalDataLayerName] || [];

      window[globalObjectName] = function () {
        window[globalDataLayerName].push(arguments);
      };
    }

    window[globalObjectName]("js", new Date());

    if (isPageTrackerEnabled) {
      autotrack();
    } else {
      api.config(config.params);
    }

    if (disableScriptLoad) {
      return;
    }

    var resource = "".concat(customResourceURL, "?id=").concat(config.id, "&l=").concat(globalDataLayerName);
    return loadScript(resource, {
      preconnectOrigin: customPreconnectOrigin,
      defer: deferScriptLoad
    }).then(function () {
      var library = window[globalObjectName];

      if (isFn(onReady)) {
        onReady(library);
      }

      return library;
    }).catch(function (error) {
      if (isFn(onError)) {
        onError(error);
      }

      return error;
    });
  }

  var Vue;
  var Router;
  var options = {
    customResourceURL: "https://www.googletagmanager.com/gtag/js",
    customPreconnectOrigin: "https://www.googletagmanager.com",
    pageTrackerTemplate: noop,
    onBeforeTrack: noop,
    onAfterTrack: noop,
    onReady: noop,
    onError: noop,
    enabled: true,
    disableScriptLoad: false,
    deferScriptLoad: false,
    bootstrap: true,
    globalObjectName: "gtag",
    globalDataLayerName: "dataLayer",
    pageTrackerUseFullPath: false,
    pageTrackerEnabled: true,
    pageTrackerScreenviewEnabled: false,
    pageTrackerSkipSamePath: true,
    defaultGroupName: "default",
    includes: null,
    appName: null,
    config: {
      id: null,
      params: {
        send_page_view: false
      }
    }
  };
  var getOptions = function getOptions() {
    return options;
  };
  var setOptions = function setOptions(_options) {
    return mergeDeep(options, _options);
  };
  var getVue = function getVue() {
    return Vue;
  };
  var getRouter = function getRouter() {
    return Router;
  };
  function install(_Vue) {
    var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _Router = arguments.length > 2 ? arguments[2] : undefined;

    Vue = _Vue;
    Router = _Router;
    setOptions(_options);
    extend();

    if (!options.bootstrap) {
      return;
    }

    _bootstrap();
  }

  var bootstrap = _bootstrap;
  var setOptions$1 = setOptions; // export api for usages outside Vuejs context

  var query$1 = api.query;
  var config$1 = api.config;
  var event$1 = api.event;
  var pageview$1 = api.pageview;
  var screenview$1 = api.screenview;
  var customMap$1 = api.customMap;
  var time$1 = api.time;
  var exception$1 = api.exception;
  var linker$1 = api.linker;
  var purchase$1 = api.purchase;
  var set$1 = api.set;
  var optIn$1 = api.optIn;
  var optOut$1 = api.optOut;
  var refund$1 = api.refund;

  exports.bootstrap = bootstrap;
  exports.config = config$1;
  exports.customMap = customMap$1;
  exports.default = install;
  exports.event = event$1;
  exports.exception = exception$1;
  exports.install = install;
  exports.linker = linker$1;
  exports.optIn = optIn$1;
  exports.optOut = optOut$1;
  exports.pageview = pageview$1;
  exports.purchase = purchase$1;
  exports.query = query$1;
  exports.refund = refund$1;
  exports.screenview = screenview$1;
  exports.set = set$1;
  exports.setOptions = setOptions$1;
  exports.time = time$1;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
